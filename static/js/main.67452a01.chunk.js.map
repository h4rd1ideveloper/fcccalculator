{"version":3,"sources":["index.js"],"names":["projectName","isOperator","endsWithOperator","endsWithNegativeSign","clearStyle","background","operatorStyle","equalsStyle","position","height","bottom","Calculator","props","state","currentVal","prevVal","formula","currentSign","lastClicked","maxDigitWarning","bind","handleOperators","handleEvaluate","initialize","handleDecimal","handleNumbers","this","setState","setTimeout","includes","expression","test","slice","replace","answer","Math","round","eval","toString","evaluated","e","value","target","length","match","className","Formula","Output","currentValue","Buttons","decimal","evaluate","numbers","operators","rel","href","React","Component","id","onClick","style","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.67452a01.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './App.scss'\n\n/* eslint-disable react/prop-types, react/no-multi-comp,\n no-eval, no-nested-ternary */\n\n// eslint-disable-next-line no-unused-vars\nconst projectName = \"javascript-calculator\";\n\n// To see a more advanced version of this app with features such as toggle sign\n// and Clear Entry buttons, see this pen\n// https://codepen.io/no_stack_dub_sack/full/jrxpKP/\n\n// coded by @no-stack-dub-sack (github) / @no_stack_sub_sack (codepen)\n\n// VARS:\nconst isOperator = /[x/+‑]/,\n  endsWithOperator = /[x+‑/]$/,\n  endsWithNegativeSign = /[x/+]‑$/,\n  clearStyle = { background: \"#ac3939\" },\n  operatorStyle = { background: \"#666666\" },\n  equalsStyle = {\n    background: \"#004466\",\n    position: \"absolute\",\n    height: 130,\n    bottom: 5\n  };\n\n// COMPONENTS:\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\"\n    };\n    this.maxDigitWarning = this.maxDigitWarning.bind(this);\n    this.handleOperators = this.handleOperators.bind(this);\n    this.handleEvaluate = this.handleEvaluate.bind(this);\n    this.initialize = this.initialize.bind(this);\n    this.handleDecimal = this.handleDecimal.bind(this);\n    this.handleNumbers = this.handleNumbers.bind(this);\n  }\n\n  maxDigitWarning() {\n    this.setState({\n      currentVal: \"Digit Limit Met\",\n      prevVal: this.state.currentVal\n    });\n    setTimeout(() => this.setState({ currentVal: this.state.prevVal }), 1000);\n  }\n\n  handleEvaluate() {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      let expression = this.state.formula;\n      while (endsWithOperator.test(expression)) {\n        expression = expression.slice(0, -1);\n      }\n      expression = expression.replace(/x/g, \"*\").replace(/‑/g, \"-\");\n      let answer = Math.round(1000000000000 * eval(expression)) / 1000000000000;\n      this.setState({\n        currentVal: answer.toString(),\n        formula:\n          expression.replace(/\\*/g, \"⋅\").replace(/-/g, \"‑\") + \"=\" + answer,\n        prevVal: answer,\n        evaluated: true\n      });\n    }\n  }\n\n  handleOperators(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const value = e.target.value;\n      const { formula, prevVal, evaluated } = this.state;\n      this.setState({ currentVal: value, evaluated: false });\n      if (evaluated) {\n        this.setState({ formula: prevVal + value });\n      } else if (!endsWithOperator.test(formula)) {\n        this.setState({\n          prevVal: formula,\n          formula: formula + value\n        });\n      } else if (!endsWithNegativeSign.test(formula)) {\n        this.setState({\n          formula:\n            (endsWithNegativeSign.test(formula + value) ? formula : prevVal) +\n            value\n        });\n      } else if (value !== \"‑\") {\n        this.setState({\n          formula: prevVal + value\n        });\n      }\n    }\n  }\n\n  handleNumbers(e) {\n    if (!this.state.currentVal.includes(\"Limit\")) {\n      const { currentVal, formula, evaluated } = this.state;\n      const value = e.target.value;\n      this.setState({ evaluated: false });\n      if (currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (evaluated) {\n        this.setState({\n          currentVal: value,\n          formula: value !== \"0\" ? value : \"\"\n        });\n      } else {\n        this.setState({\n          currentVal:\n            currentVal === \"0\" || isOperator.test(currentVal)\n              ? value\n              : currentVal + value,\n          formula:\n            currentVal === \"0\" && value === \"0\"\n              ? formula === \"\"\n                ? value\n                : formula\n              : /([^.0-9]0|^0)$/.test(formula)\n              ? formula.slice(0, -1) + value\n              : formula + value\n        });\n      }\n    }\n  }\n\n  handleDecimal() {\n    if (this.state.evaluated === true) {\n      this.setState({\n        currentVal: \"0.\",\n        formula: \"0.\",\n        evaluated: false\n      });\n    } else if (\n      !this.state.currentVal.includes(\".\") &&\n      !this.state.currentVal.includes(\"Limit\")\n    ) {\n      this.setState({ evaluated: false });\n      if (this.state.currentVal.length > 21) {\n        this.maxDigitWarning();\n      } else if (\n        endsWithOperator.test(this.state.formula) ||\n        (this.state.currentVal === \"0\" && this.state.formula === \"\")\n      ) {\n        this.setState({\n          currentVal: \"0.\",\n          formula: this.state.formula + \"0.\"\n        });\n      } else {\n        this.setState({\n          currentVal: this.state.formula.match(/(-?\\d+\\.?\\d*)$/)[0] + \".\",\n          formula: this.state.formula + \".\"\n        });\n      }\n    }\n  }\n\n  initialize() {\n    this.setState({\n      currentVal: \"0\",\n      prevVal: \"0\",\n      formula: \"\",\n      currentSign: \"pos\",\n      lastClicked: \"\",\n      evaluated: false\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"calculator\">\n          <Formula formula={this.state.formula.replace(/x/g, \"⋅\")} />\n          <Output currentValue={this.state.currentVal} />\n          <Buttons\n            decimal={this.handleDecimal}\n            evaluate={this.handleEvaluate}\n            initialize={this.initialize}\n            numbers={this.handleNumbers}\n            operators={this.handleOperators}\n          />\n        </div>\n        <div className=\"author\">\n          {\" \"}\n          Designed and Coded By <br />\n          <a\n            rel=\"noopener noreferrer\"\n            href=\"https://goo.gl/6NNLMG\"\n            target=\"_blank\"\n          >\n            Peter Weinberg\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Buttons extends React.Component {\n  render() {\n    return (\n      <div>\n        <button\n          className=\"jumbo\"\n          id=\"clear\"\n          onClick={this.props.initialize}\n          style={clearStyle}\n          value=\"AC\"\n        >\n          AC\n        </button>\n        <button\n          id=\"divide\"\n          onClick={this.props.operators}\n          style={operatorStyle}\n          value=\"/\"\n        >\n          /\n        </button>\n        <button\n          id=\"multiply\"\n          onClick={this.props.operators}\n          style={operatorStyle}\n          value=\"x\"\n        >\n          x\n        </button>\n        <button id=\"seven\" onClick={this.props.numbers} value=\"7\">\n          7\n        </button>\n        <button id=\"eight\" onClick={this.props.numbers} value=\"8\">\n          8\n        </button>\n        <button id=\"nine\" onClick={this.props.numbers} value=\"9\">\n          9\n        </button>\n        <button\n          id=\"subtract\"\n          onClick={this.props.operators}\n          style={operatorStyle}\n          value=\"‑\"\n        >\n          -\n        </button>\n        <button id=\"four\" onClick={this.props.numbers} value=\"4\">\n          4\n        </button>\n        <button id=\"five\" onClick={this.props.numbers} value=\"5\">\n          5\n        </button>\n        <button id=\"six\" onClick={this.props.numbers} value=\"6\">\n          6\n        </button>\n        <button\n          id=\"add\"\n          onClick={this.props.operators}\n          style={operatorStyle}\n          value=\"+\"\n        >\n          +\n        </button>\n        <button id=\"one\" onClick={this.props.numbers} value=\"1\">\n          1\n        </button>\n        <button id=\"two\" onClick={this.props.numbers} value=\"2\">\n          2\n        </button>\n        <button id=\"three\" onClick={this.props.numbers} value=\"3\">\n          3\n        </button>\n        <button\n          className=\"jumbo\"\n          id=\"zero\"\n          onClick={this.props.numbers}\n          value=\"0\"\n        >\n          0\n        </button>\n        <button id=\"decimal\" onClick={this.props.decimal} value=\".\">\n          .\n        </button>\n        <button\n          id=\"equals\"\n          onClick={this.props.evaluate}\n          style={equalsStyle}\n          value=\"=\"\n        >\n          =\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Output extends React.Component {\n  render() {\n    return (\n      <div className=\"outputScreen\" id=\"display\">\n        {this.props.currentValue}\n      </div>\n    );\n  }\n}\n\nclass Formula extends React.Component {\n  render() {\n    return <div className=\"formulaScreen\">{this.props.formula}</div>;\n  }\n}\n\nReactDOM.render(<Calculator />, document.getElementById(\"root\"));\n"],"sourceRoot":""}